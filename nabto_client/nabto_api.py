# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _nabto_api
else:
    import _nabto_api

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def hello():
    return _nabto_api.hello()

def print_string(str):
    return _nabto_api.print_string(str)

def nabto_startup(home_dir):
    return _nabto_api.nabto_startup(home_dir)
class Status(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NABTO_OK = _nabto_api.Status_NABTO_OK
    NABTO_NO_PROFILE = _nabto_api.Status_NABTO_NO_PROFILE
    NABTO_ERROR_READING_CONFIG = _nabto_api.Status_NABTO_ERROR_READING_CONFIG
    NABTO_API_NOT_INITIALIZED = _nabto_api.Status_NABTO_API_NOT_INITIALIZED
    NABTO_INVALID_SESSION = _nabto_api.Status_NABTO_INVALID_SESSION
    NABTO_OPEN_CERT_OR_PK_FAILED = _nabto_api.Status_NABTO_OPEN_CERT_OR_PK_FAILED
    NABTO_UNLOCK_PK_FAILED = _nabto_api.Status_NABTO_UNLOCK_PK_FAILED
    NABTO_PORTAL_LOGIN_FAILURE = _nabto_api.Status_NABTO_PORTAL_LOGIN_FAILURE
    NABTO_CERT_SIGNING_ERROR = _nabto_api.Status_NABTO_CERT_SIGNING_ERROR
    NABTO_CERT_SAVING_FAILURE = _nabto_api.Status_NABTO_CERT_SAVING_FAILURE
    NABTO_ADDRESS_IN_USE = _nabto_api.Status_NABTO_ADDRESS_IN_USE
    NABTO_INVALID_ADDRESS = _nabto_api.Status_NABTO_INVALID_ADDRESS
    NABTO_NO_NETWORK = _nabto_api.Status_NABTO_NO_NETWORK
    NABTO_CONNECT_TO_HOST_FAILED = _nabto_api.Status_NABTO_CONNECT_TO_HOST_FAILED
    NABTO_STREAMING_UNSUPPORTED = _nabto_api.Status_NABTO_STREAMING_UNSUPPORTED
    NABTO_INVALID_STREAM = _nabto_api.Status_NABTO_INVALID_STREAM
    NABTO_DATA_PENDING = _nabto_api.Status_NABTO_DATA_PENDING
    NABTO_BUFFER_FULL = _nabto_api.Status_NABTO_BUFFER_FULL
    NABTO_FAILED = _nabto_api.Status_NABTO_FAILED
    NABTO_INVALID_TUNNEL = _nabto_api.Status_NABTO_INVALID_TUNNEL
    NABTO_ILLEGAL_PARAMETER = _nabto_api.Status_NABTO_ILLEGAL_PARAMETER
    NABTO_INVALID_RESOURCE = _nabto_api.Status_NABTO_INVALID_RESOURCE
    NABTO_INVALID_STREAM_OPTION = _nabto_api.Status_NABTO_INVALID_STREAM_OPTION
    NABTO_INVALID_STREAM_OPTION_ARGUMENT = _nabto_api.Status_NABTO_INVALID_STREAM_OPTION_ARGUMENT
    NABTO_ABORTED = _nabto_api.Status_NABTO_ABORTED
    NABTO_STREAM_CLOSED = _nabto_api.Status_NABTO_STREAM_CLOSED
    NABTO_FAILED_WITH_JSON_MESSAGE = _nabto_api.Status_NABTO_FAILED_WITH_JSON_MESSAGE
    NABTO_ERROR_CODE_COUNT = _nabto_api.Status_NABTO_ERROR_CODE_COUNT

    def __init__(self):
        _nabto_api.Status_swiginit(self, _nabto_api.new_Status())
    __swig_destroy__ = _nabto_api.delete_Status

# Register Status in _nabto_api:
_nabto_api.Status_swigregister(Status)



